{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from splinter import Browser\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Scraping\n",
    "\n",
    "\n",
    "def scrape_all():\n",
    "\n",
    "    # Initiate headless driver for deployment\n",
    "    executable_path = {\"executable_path\": \"chromedriver\"}\n",
    "    \n",
    "    browser = Browser(\"chrome\", executable_path, headless = False)\n",
    "    \n",
    "    # go to NASA website and scrape\n",
    "    url = \"https://mars.nasa.gov/news/\"\n",
    "    \n",
    "       \n",
    "    # go to NASA Mars News Site and scrape\n",
    "    url = \"https://mars.nasa.gov/news/\"\n",
    "    browser.visit(url)\n",
    "\n",
    "    # parse through text html\n",
    "    html_code = browser.html\n",
    "\n",
    "    soup = BeautifulSoup(htmlText, \"html.parser\")\n",
    "\n",
    "    # collect news title and paragraph text\n",
    "    news_title = soup.find(\"div\", class_=\"bottom_gradient\").text\n",
    "    news_p = soup.find(\"div\", class_=\"rollover_description_inner\").text   \n",
    "\n",
    "    console.log(news_title)\n",
    "    \n",
    "    console.log(news_p)\n",
    "\n",
    "    # Stop webdriver and return data\n",
    "    # browser.quit()\n",
    "    # return data\n",
    "\n",
    "    ## JPL Mars Space Images\n",
    "\n",
    "    ## visit the url for JPL Featured Space Image\n",
    "    jpl_url = \"https://www.jpl.nasa.gov/spaceimages/?search=&category=Mars\"\n",
    "    browser.visit(url)\n",
    "    \n",
    "    # Use splinter browser to navigate to find image link\n",
    "    \n",
    "    browser.click_link_by_partial_text(\"FULL IMAGE\")\n",
    "    browser.click_link_by_partial_text(\"more info\")\n",
    "    \n",
    "    image_html = browser.html\n",
    "    \n",
    "    # Parser\n",
    "    \n",
    "    soup = BeautifulSoup(image_html, \"html.parser\")\n",
    "    \n",
    "    # Find path\n",
    "    image_path = soup.find(\"figure\", class_=\"lede\").a[href]\n",
    "    featured_image_url = \"https:www.jpl.nasa.gov/\" + image_path\n",
    "    \n",
    "    \n",
    "    ## Mars Weather\n",
    "    \n",
    "    mars_weather_url = \"https://twitter.com/marswxreport?lang=en\"\n",
    "    browser.visit(mars_weather_url)\n",
    "    weather_html = browser.html\n",
    "    \n",
    "    ##Retrieve the latest Mars Weather tweet\n",
    "    \n",
    "    soup = BeautifulSoup(weather_html, \"html.parser\")\n",
    "    mars_weather = soup.find(\"p\", class_=\"TweetTextSize TweetTextSize--normal js-tweet-text tweet-text\").text\n",
    "    \n",
    "    ## Mars Facts\n",
    "    \n",
    "    ## mars facts url and splinter browser\n",
    "    facts_url = \"https://space-facts.com/mars/\"\n",
    "    browser.visit(facts_url)\n",
    "    \n",
    "    \n",
    "    ##  parse through text html\n",
    "    facts_url = browser.html\n",
    "    soup = BeautifulSoup(facts_html, \"html.parser\")\n",
    "    \n",
    "    ## Retrieve table\n",
    "    \n",
    "    table_data = soup.find(\"table\", class_=\"tablepress tablepress-id-mars\")\n",
    "    \n",
    "    \n",
    "    ## Find table \n",
    "    \n",
    "    table_data = soup.find(\"table\", class_=\"tablepress tablepress-id-mars\")\n",
    "    \n",
    "    \n",
    "    ## Find all table row\n",
    "    \n",
    "    table_all = table_data.find_all(\"tr\")\n",
    "    \n",
    "    \n",
    "    ## Array list to hold td elements which alternate between label and value\n",
    "    labels = []\n",
    "    values = []\n",
    "    \n",
    "    ## Append the first td element to labels and the second to values\n",
    "    for tr in table_all:\n",
    "        td_elements = tr.find_all(\"td\")\n",
    "        labels.append(td_elements[0].text)\n",
    "        values.append(td_elements[1].text)\n",
    "        \n",
    "    ## Create a data frame\n",
    "    mars_facts_df = pd.DataFrame({\n",
    "        \"Label\": labels,\n",
    "        \"Values\": values\n",
    "    })\n",
    "    \n",
    "    ## Html code for DataFrame\n",
    "    fact_table = mars_facts_df.to_html(header = False, index = False)\n",
    "    fact_table\n",
    "    \n",
    "    ## Hemisphere Images\n",
    "    \n",
    "    usgs_url = \"https://astrogeology.usgs.gov/search/results?q=hemisphere+enhanced&k1=target&v1=Mars\"\n",
    "    \n",
    "    browser.visit(usgs_url)\n",
    "    \n",
    "    usgs_html = browser.html\n",
    "    \n",
    "    soup = BeautifulSoup(usgs_html, \"html.parser\")\n",
    "    \n",
    "    ## Retrieve class for storing Hemisphere picture\n",
    "    returns = soup.find(\"div\", class_=\"collapsible results\")\n",
    "    hemispheres = returns.find_all(\"a\")\n",
    "    \n",
    "    ## Setup list to storing dictionaries\n",
    "    hemisphere_image_urls = []\n",
    "    \n",
    "    for a in hemispheres:\n",
    "        ## Retrieve title and link from main page\n",
    "        title = a.h3.text\n",
    "        link = \"https://astrogeology.usgs.gov\" + a[\"href\"]\n",
    "        \n",
    "        browser.visit(link)\n",
    "        \n",
    "        \n",
    "        ## Retrieve image links\n",
    "        image_page = browser.html\n",
    "        results =BeautifulSoup(image_page, \"html.parser\")\n",
    "        img_link = results.find(\"div\", class_=\"downloads\").find(\"li\").a[\"href\"]\n",
    "                                \n",
    "        ## Create image dictionary for each image and title\n",
    "        image_dict = {}\n",
    "        image_dict[\"title\"] = title\n",
    "        image_dict[\"img_url\"] = img_link\n",
    "                                \n",
    "        hemisphere_image_urls.append(image_dict)\n",
    "        \n",
    "        mars_dict = {\n",
    "            \"id\": 1,\n",
    "            \"news_title\": news_title,\n",
    "            \"news_p\": news_p,\n",
    "            \"featured_image_url\": featured_image_url,\n",
    "            \"mars_weather\":mars_weather,\n",
    "            \"fact_table\": fact_table,\n",
    "            \"hemisphere_images\": hemisphere_image_urls\n",
    "            \n",
    "        }\n",
    "        mars_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
